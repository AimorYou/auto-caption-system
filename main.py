import nest_asyncio
import re
import glob
import face_recognition
import os

from aiogram import types, executor, Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from markups import main_menu, inline_menu, inline_edit_menu
from config import API_TOKEN, HELP, users, bot_password
from functions import load_photo_with_name, parse_filename, show_people
import recognizer
import config


class ProfileStatesGroup(StatesGroup):
    name = State()
    photo = State()

    delete_photo = State()

    uri = State()
    end_rec = State()

    select_person = State()

    edit_idx = State()
    edit_name = State()

    password = State()

    set_ip = State()
    set_port = State()
    set_password = State()


nest_asyncio.apply()

rec = recognizer.Main()
storage = MemoryStorage()
bot = Bot(API_TOKEN)
dp = Dispatcher(bot=bot, storage=storage)

ipv4_pattern = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''


@dp.message_handler(lambda mes: mes.chat.id not in users, commands=['start'])
async def get_access(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!')
    await ProfileStatesGroup.password.set()
    await message.delete()


@dp.message_handler(state=ProfileStatesGroup.password)
async def check_password(message: types.Message, state: FSMContext):
    if message.text == bot_password:
        users.append(message.chat.id)
        await message.delete()
        await message.answer(f"Boom! üí• –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏ /help",
                             reply_markup=main_menu)
    else:
        await message.answer('–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ!')
    await state.finish()


@dp.message_handler(lambda mes: mes.chat.id not in users)
async def have_access(message: types.Message):
    await bot.send_message(message.chat.id, '–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –º–Ω–µ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º–∏ –ª—é–¥—å–º–∏!')


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(f"Boom! üí• –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏ /help",
                         reply_markup=main_menu)
    await message.delete()


@dp.message_handler(commands=['help'])
async def cmd_start(message: types.Message):
    await message.answer(HELP, reply_markup=main_menu, parse_mode='HTML')
    await message.delete()


# --------------------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ-----------------------------------------------------------
@dp.message_handler(Text(equals="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üì∑"), state=[None, '*'])
async def cmd_add(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è-–†–æ–ª—å (e.g. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)",
                        reply_markup=inline_menu)
    await ProfileStatesGroup.name.set()


@dp.message_handler(state=ProfileStatesGroup.name)
async def load_name(message: types.Message, state: FSMContext):
    if re.fullmatch(r'[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+-[–ê-–Ø–Å–∞-—è—ë ]+', message.text):
        async with state.proxy() as data:
            data['name'] = message.text
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ —á–µ–ª–æ–≤–µ–∫–∞",
                             reply_markup=inline_menu)
        await ProfileStatesGroup.next()
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è-–†–æ–ª—å (e.g. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)",
            reply_markup=inline_menu)


@dp.message_handler(content_types=['photo'], state=ProfileStatesGroup.photo)
async def load_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download('uploaded/1.jpg')
    image = face_recognition.load_image_file('uploaded/1.jpg')
    enc = face_recognition.face_encodings(image)
    if len(enc) > 1:
        await message.answer(f"‚ö†Ô∏è –í –∫–∞–¥—Ä–µ –±–æ–ª—å—à–µ 1 —á–µ–ª–æ–≤–µ–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!",
                             reply_markup=inline_menu)
    elif len(enc) == 0:
        await message.answer(f"‚ö†Ô∏è –õ–∏—Ü–æ –Ω–µ –±—ã–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!",
                             reply_markup=inline_menu)
    else:
        async with state.proxy() as data:
            fullname, role = data['name'].split('-')
            path = load_photo_with_name('_'.join(fullname.split()) + '-' + role)
            file = face_recognition.load_image_file(path)
            rec.rec.add_photo(fullname, role, file)
        await message.answer(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        await state.finish()
# --------------------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ-----------------------------------------------------------

# --------------------------------------------–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ-------------------------------------------------------------


@dp.message_handler(Text(equals="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ ‚úãüèª"))
async def cmd_del(message: types.Message):
    files = ["png", "jpg"]
    people = glob.glob(f"people/*{files}")
    if len(people) > 0:
        await show_people(message, people, main_menu)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(people)}), –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                             reply_markup=inline_menu)
        await ProfileStatesGroup.delete_photo.set()

        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data['people'] = people
    else:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!",
                             reply_markup=inline_menu)


@dp.message_handler(state=ProfileStatesGroup.delete_photo)
async def del_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        people = data['people']

    if re.fullmatch('\d+', message.text):
        idx = int(message.text) - 1

        if idx <= -1 or idx >= len(people):
            await message.answer(f"‚ö†Ô∏è –ß–∏—Å–ª–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ {len(people)}",
                                 reply_markup=inline_menu)
        else:
            rec.rec.del_photo(idx)
            #shutil.move(people[idx], "deleted")
            os.remove(people[idx])
            await message.answer(f"–§–æ—Ç–æ ‚Ññ{idx + 1}({people[idx][-4:]}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=main_menu)
            await state.finish()
    else:
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(people)}), –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
            reply_markup=inline_menu)
# --------------------------------------------–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ------------------------------------------------------------


# --------------------------------------------–í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ñ–æ—Ç–æ----------------------------------------------------------
@dp.message_handler(Text(equals="–í—ã–≤–µ—Å—Ç–∏ –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π üëÄ"))
async def cmd_show_all_people(message: types.Message):
    files = ["png", "jpg"]
    people = glob.glob(f"people/*{files}")
    if len(people) > 0:
        await show_people(message, people, main_menu)
    else:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!", reply_markup=main_menu)
# --------------------------------------------–í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ñ–æ—Ç–æ-----------------------------------------------------------


# --------------------------------------------–í—ã–≤–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ñ–æ—Ç–æ---------------------------------------------------
@dp.message_handler(Text(equals="–í—ã–≤–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ñ–æ—Ç–æ üëÅÔ∏è"))
async def cmd_show_person(message: types.Message):
    files = ["png", "jpg"]
    filenames = glob.glob(f"people/*{files}")
    people = []
    for filename in filenames:
        if re.search('[–ê-–Ø–Å][–∞-—è—ë]+_[–ê-–Ø–Å][–∞-—è—ë]+-[–ê-–Ø–Å–∞-—è—ë ]+.jpg', filename):
            people.append(filename)
    if len(people) > 0:
        await show_people(message, people, main_menu)
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(people)}), —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
            reply_markup=inline_menu)
        await ProfileStatesGroup.select_person.set()

        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data['people'] = people
    else:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!", reply_markup=main_menu)


@dp.message_handler(state=ProfileStatesGroup.select_person)
async def show_person(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        unique_people = data['people']

    if re.fullmatch('\d+', message.text):
        idx = int(message.text) - 1

        if idx <= -1 or idx >= len(unique_people):
            await message.answer(f"‚ö†Ô∏è –ß–∏—Å–ª–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ {len(unique_people)}",
                                 reply_markup=inline_menu)
        else:
            files = ["png", "jpg"]
            people = sorted(glob.glob(f"people/*{files}"), reverse=True)

            current_person = unique_people[idx][:-4]
            for person in people:
                if current_person in person:
                    with open(person, "rb") as photo:
                        full_name, role = parse_filename(person)
                        await message.answer_photo(photo, caption=f"{full_name} -- {role}")
            await state.finish()
    else:
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(unique_people)}), —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
            reply_markup=inline_menu)


# --------------------------------------------–í—ã–≤–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ñ–æ—Ç–æ---------------------------------------------------

# --------------------------------------------–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è---------------------------------------------------------
@dp.message_handler(Text(equals="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ-–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ üìù"))
async def cmd_edit(message: types.Message):
    files = ["png", "jpg"]
    people = glob.glob(f"people/*{files}")
    if len(people) > 0:
        await show_people(message, people, main_menu)
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(people)}), –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            reply_markup=inline_menu)
        await ProfileStatesGroup.edit_idx.set()

        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data['people'] = people
    else:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!",
                             reply_markup=inline_menu)


@dp.message_handler(state=ProfileStatesGroup.edit_idx)
async def select_person(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        people = data['people']

    if re.fullmatch('\d+', message.text):
        idx = int(message.text) - 1

        if idx <= -1 or idx >= len(people):
            await message.answer(f"‚ö†Ô∏è –ß–∏—Å–ª–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ {len(people)}",
                                 reply_markup=inline_menu)
        else:
            async with state.proxy() as data:
                data['edit_name'] = people[idx]
            await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                                 reply_markup=inline_edit_menu)
    else:
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(people)}), —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
            reply_markup=inline_menu)


@dp.message_handler(state=ProfileStatesGroup.edit_name)
async def edit_person_name(message: types.Message, state: FSMContext):
    if re.fullmatch(r'[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+-[–ê-–Ø–Å–∞-—è—ë ]+', message.text):
        async with state.proxy() as data:
            edit_name = data['edit_name']
            os.rename(edit_name, 'people/' + '_'.join(message.text.split()) + '.jpg')

        await message.answer("–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!")
        await state.finish()
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è_–§–∞–º–∏–ª–∏—è-–†–æ–ª—å (e.g. –ò–≤–∞–Ω_–ò–≤–∞–Ω–æ–≤-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)",
            reply_markup=inline_menu)


# --------------------------------------------–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è---------------------------------------------------------

# --------------------------------------------–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ---------------------------------------------------
@dp.message_handler(Text(equals="–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ üö´"), state='*')
async def cmd_end_rec(message: types.Message, state: FSMContext):
    try:
        rec.rec.set_star_title()
        await rec.end()
        await message.reply("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å")
    except Exception as e:
        await message.answer("‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! " + str(e))
    finally:
        await state.finish()


# --------------------------------------------–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ---------------------------------------------------
# --------------------------------------------OBS config---------------------------------------------------
@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å OBS ‚öôÔ∏è"))
async def cmd_obs_config(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ip OBS —Å–µ—Ä–≤–µ—Ä–∞! (–ü—Ä–∏–º–µ—Ä: 192.168.12.197)", reply_markup=inline_menu)
    await ProfileStatesGroup.set_ip.set()


@dp.message_handler(state=ProfileStatesGroup.set_ip)
async def set_ip_obs(message: types.Message, state: FSMContext):
    if re.fullmatch(ipv4_pattern, message.text):
        config.host = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç OBS —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç 1 –¥–æ 65535! (–ü—Ä–∏–º–µ—Ä: 4445)", reply_markup=inline_menu)
        await ProfileStatesGroup.next()
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ip! –í–≤–µ–¥–∏—Ç–µ ip OBS —Å–µ—Ä–≤–µ—Ä–∞! (–ü—Ä–∏–º–µ—Ä: 192.168.12.197)",
                             reply_markup=inline_menu)


@dp.message_handler(state=ProfileStatesGroup.set_port)
async def set_port_obs(message: types.Message, state: FSMContext):
    if re.fullmatch("[0-9]+", message.text) and 1 <= int(message.text) <= 65535:
        config.port = int(message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫ OBS —Å–µ—Ä–≤–µ—Ä—É!", reply_markup=inline_menu)
        await ProfileStatesGroup.next()
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç OBS —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç 1 –¥–æ 65535! (–ü—Ä–∏–º–µ—Ä: 4445)",
                             reply_markup=inline_menu)


@dp.message_handler(state=ProfileStatesGroup.set_password)
async def set_password_obs(message: types.Message, state: FSMContext):
        config.password = message.text
        await message.answer("OBS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!",
                             reply_markup=main_menu)
        await state.finish()
# --------------------------------------------OBS config----------------------------------------------------------------


# --------------------------------------------–ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ------------------------------------------------------
@dp.message_handler(Text(equals="–ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ üîç"))
async def cmd_start_rec(message: types.Message):
    try:
        rec.rec.connect_obs()
        rec.rec.set_star_title()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ uri –≤–∞—à–µ–π –∫–∞–º–µ—Ä—ã (–ü—Ä–∏–º–µ—Ä: rtsp://192.168.1.11:554/live)",
                             reply_markup=inline_menu)
        await ProfileStatesGroup.uri.set()
    except Exception as e:
        await message.answer("‚ùó –û—à–∏–±–∫–∞!  " + str(e))


@dp.message_handler(state=ProfileStatesGroup.uri)
async def start_rec(message: types.Message, state: FSMContext):
    await ProfileStatesGroup.next()
    await message.answer("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å", reply_markup=main_menu)
    if message.text == '0':
        await rec.start(0)
    else:
        await rec.start(message.text)


# --------------------------------------------–ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ-----------------------------------------------------

@dp.callback_query_handler(state='*')
async def callback_cancel(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'cancel':
        await state.finish()
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
    elif callback.data == 'name':
        await callback.answer(
            "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è-–†–æ–ª—å (e.g. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)")
        await ProfileStatesGroup.edit_name.set()


@dp.message_handler(state='*')
async def cmd_start(message: types.Message):
    await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É! –ù–µ –ø–∏—à–∏ —Å–∞–º –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–≥–æ —Å–¥–µ–ª–∞–Ω—ã?üò°",
                         reply_markup=main_menu)


if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True)
